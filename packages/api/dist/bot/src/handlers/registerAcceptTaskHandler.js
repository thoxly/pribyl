"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerAcceptTaskHandler = void 0;
const mongoose_1 = require("mongoose");
const User_1 = __importDefault(require("../models/User"));
const Task_1 = __importDefault(require("../models/Task"));
const TaskService_1 = __importDefault(require("../services/TaskService"));
const UserSessionStore_1 = require("../services/UserSessionStore");
const SessionService_1 = require("../services/SessionService");
const escapeMarkdown_1 = require("../utils/escapeMarkdown");
const Session_1 = __importDefault(require("../models/Session"));
const registerAcceptTaskHandler = (bot) => {
    bot.action(/^accept_(.+)$/i, async (ctx) => {
        try {
            /* --- –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ------------------------------------------------ */
            const taskIdRaw = ctx.match?.[1];
            if (!taskIdRaw)
                return void ctx.answerCbQuery("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏");
            const telegramId = ctx.from?.id?.toString();
            if (!telegramId)
                return void ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å");
            const worker = await User_1.default.findOne({ telegramId });
            if (!worker)
                return void ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            const userId = worker._id;
            const taskId = new mongoose_1.Types.ObjectId(taskIdRaw);
            /* --- –∑–∞–ø—Ä–µ—Ç –≤—Ç–æ—Ä–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ ----------------------------------- */
            const activeTask = await Task_1.default.findOne({
                workerId: userId,
                status: "in-progress",
            }).lean();
            if (activeTask)
                return void ctx.answerCbQuery("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞");
            /* --- —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–æ–∫–∞—Ü–∏–∏ ---------------------- */
            const fsm = await UserSessionStore_1.UserSessionStore.getState(userId);
            const liveLocationIsActive = fsm?.data?.liveLocation?.active === true; // ‚Üê –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
            /* --- –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Å—Å–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å free) ------------------------------- */
            let session = await SessionService_1.SessionService.getActiveSession(userId);
            if (liveLocationIsActive) {
                /* ===== –õ–æ–∫–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç ‚Äî –∑–∞–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ================ */
                if (!session) {
                    // —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
                    session = await SessionService_1.SessionService.startSession(userId, taskId);
                }
                else if (!session.taskId) {
                    // free-—Å–µ—Å—Å–∏—è ‚Üí ¬´–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º¬ª –∑–∞–¥–∞—á—É
                    await Session_1.default.updateOne({ _id: session._id }, { taskId: taskId });
                }
                else if (String(session.taskId) !== String(taskId)) {
                    // –≤–∏—Å–∏—Ç –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å –Ω—É–∂–Ω—ã–º taskId
                    await SessionService_1.SessionService.endSession(session._id);
                    session = await SessionService_1.SessionService.startSession(userId, taskId);
                }
                await TaskService_1.default.startTask(userId);
                await UserSessionStore_1.UserSessionStore.setState(userId, "task_in_progress", {
                    taskId: taskId.toString(),
                    liveLocation: { active: true },
                });
                /* —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É */
                try {
                    await ctx.editMessageReplyMarkup(undefined);
                }
                catch {
                    /* –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ */
                }
                const task = await Task_1.default.findById(taskId).lean();
                if (task) {
                    await ctx.reply(`üìç –í—ã —É–∂–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π. –ó–∞–¥–∞—á–∞ *${task.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}* –Ω–∞—á–∞—Ç–∞.`, {
                        parse_mode: "Markdown",
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
                                        callback_data: `complete_${taskId}`,
                                    },
                                ],
                            ],
                        },
                    });
                }
                await ctx.answerCbQuery("–ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞");
            }
            else {
                /* ===== –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –∂–¥—ë–º –ø–µ—Ä–≤—É—é live-—Ç–æ—á–∫—É ========================= */
                await UserSessionStore_1.UserSessionStore.setState(userId, "awaiting_location", {
                    taskId: taskId.toString(),
                });
                /* –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –ª–æ–∫–∞—Ü–∏–∏ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏) */
                console.info(`[AcceptTask] ${telegramId} –Ω–∞–∂–∞–ª "–í–∑—è—Ç—å", –Ω–æ –ª–æ–∫–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞`);
                try {
                    await ctx.editMessageReplyMarkup(undefined);
                }
                catch {
                    /* –æ–∫, –µ—Å–ª–∏ —É–∂–µ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ */
                }
                await ctx.answerCbQuery("–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–æ–∫–∞—Ü–∏–∏");
                await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π: üìé *–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å ‚Üí –õ–æ–∫–∞—Ü–∏—è ‚Üí –í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*.", {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_assigned_task" }],
                        ],
                    },
                });
            }
        }
        catch (e) {
            console.error("[AcceptTask] error:", e);
            await ctx.answerCbQuery("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
        }
    });
    bot.action("back_to_assigned_task", async (ctx) => {
        console.log("üëà –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ back_to_assigned_task");
        try {
            const telegramId = ctx.from?.id?.toString();
            if (!telegramId) {
                await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return;
            }
            const worker = await User_1.default.findOne({ telegramId });
            if (!worker) {
                await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            const fsm = await UserSessionStore_1.UserSessionStore.getState(worker._id);
            const taskId = fsm?.data?.taskId;
            if (!taskId) {
                await ctx.answerCbQuery("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏");
                return;
            }
            const task = await Task_1.default.findById(taskId)
                .populate("createdBy", "fullName")
                .lean();
            if (!task) {
                await ctx.answerCbQuery("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return;
            }
            const fullTask = task;
            await UserSessionStore_1.UserSessionStore.setState(worker._id, "awaiting_task_in_progress", {
                taskId: fullTask._id.toString(),
            });
            const parts = ["üõ† *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞*"];
            if (fullTask.title)
                parts.push(`*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(fullTask.title)}`);
            if (fullTask.address)
                parts.push(`*–ê–¥—Ä–µ—Å:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(fullTask.address)}`);
            if (fullTask.dateStart)
                parts.push(`*–ù–∞—á–∞–ª–æ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(new Date(fullTask.dateStart).toLocaleString())}`);
            if (fullTask.deadline)
                parts.push(`*–î–µ–¥–ª–∞–π–Ω:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(new Date(fullTask.deadline).toLocaleString())}`);
            if (fullTask.description)
                parts.push(`*–û–ø–∏—Å–∞–Ω–∏–µ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(fullTask.description)}`);
            if (fullTask.createdBy?.fullName)
                parts.push(`*–°–æ–∑–¥–∞–Ω–æ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(fullTask.createdBy.fullName)}`);
            const message = parts.join("\n");
            await ctx.editMessageText(message, {
                parse_mode: "MarkdownV2",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                callback_data: `accept_${fullTask._id}`,
                            },
                        ],
                        [
                            {
                                text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–∞–º",
                                callback_data: "back_to_tasks",
                            },
                        ],
                    ],
                },
            });
            await ctx.answerCbQuery();
        }
        catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∑–∞–¥–∞—á–µ:", err);
            await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞");
        }
    });
};
exports.registerAcceptTaskHandler = registerAcceptTaskHandler;
