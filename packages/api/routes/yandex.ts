// routes/yandex.ts
import express, { Request, Response, NextFunction } from "express";
import fetch from "node-fetch";

const router = express.Router();

const apiKey = process.env.YANDEX_API_KEY;

console.log("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /yandex-suggest");
console.log("üîë YANDEX_API_KEY:", apiKey);

router.get(
  "/yandex-suggest",
  async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    const { text } = req.query;

    if (!text || typeof text !== "string") {
      res.status(400).json({ error: "No text provided" });
      return;
    }

    const apiKey = process.env.YANDEX_API_KEY;
    const url = `https://suggest-maps.yandex.ru/v1/suggest?apikey=${apiKey}&text=${encodeURIComponent(
      text
    )}&lang=ru_RU&type=geo`;

    console.log("üì° –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å—É:", url);

    try {
      const response = await fetch(url);
      if (!response.ok) {
        res.status(response.status).json({ error: "Failed to fetch from Yandex" });
        return;
      }

      const data = await response.json();
      res.json(data); // –±–µ–∑ return, –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ø–Ω–¥–µ–∫—Å—É:", err);
      next(err); // –ø–µ—Ä–µ–¥–∞—ë–º –≤ middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    }
  }
);

export default router;
