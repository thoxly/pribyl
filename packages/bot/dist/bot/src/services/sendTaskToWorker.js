"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTaskToWorker = void 0;
const __1 = require("../");
const User_1 = __importDefault(require("../models/User"));
const Task_1 = __importDefault(require("../models/Task"));
const escapeMarkdown_1 = require("../utils/escapeMarkdown");
const UserSessionStore_1 = require("../services/UserSessionStore");
const sendTaskToWorker = async (taskInput) => {
    try {
        if (!taskInput.workerId || !taskInput.company) {
            console.warn(`–ó–∞–¥–∞—á–∞ ${taskInput._id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç workerId –∏–ª–∏ company`);
            return;
        }
        const task = await Task_1.default.findById(taskInput._id)
            .populate("createdBy", "fullName")
            .lean();
        if (!task) {
            console.warn(`–ó–∞–¥–∞—á–∞ ${taskInput._id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        if (!task.company) {
            console.warn(`–ó–∞–¥–∞—á–∞ ${task._id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç company`);
            return;
        }
        const worker = await User_1.default.findById(task.workerId).lean();
        if (!worker?.telegramId) {
            console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${task.workerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram`);
            return;
        }
        if (!worker.company || worker.company.toString() !== task.company.toString()) {
            console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${worker._id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏`);
            return;
        }
        await UserSessionStore_1.UserSessionStore.setState(worker._id, "awaiting_task_in_progress", {
            taskId: task._id.toString(),
        });
        const parts = ["üõ† *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞*"];
        if (task.title)
            parts.push(`*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(task.title)}`);
        if (task.address)
            parts.push(`*–ê–¥—Ä–µ—Å:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(task.address)}`);
        if (task.dateStart)
            parts.push(`*–ù–∞—á–∞–ª–æ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(new Date(task.dateStart).toLocaleString())}`);
        if (task.deadline)
            parts.push(`*–î–µ–¥–ª–∞–π–Ω:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(new Date(task.deadline).toLocaleString())}`);
        if (task.description)
            parts.push(`*–û–ø–∏—Å–∞–Ω–∏–µ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(task.description)}`);
        if (task.createdBy?.fullName)
            parts.push(`*–°–æ–∑–¥–∞–Ω–æ:* ${(0, escapeMarkdown_1.escapeMarkdownV2)(task.createdBy.fullName)}`);
        const message = parts.join("\n");
        await __1.bot.telegram.sendMessage(worker.telegramId, message, {
            parse_mode: "MarkdownV2",
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data: `accept_${task._id}` }],
                    [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data: "back_to_assigned_task" }],
                ],
            },
        });
    }
    catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä—É:", err);
    }
};
exports.sendTaskToWorker = sendTaskToWorker;
