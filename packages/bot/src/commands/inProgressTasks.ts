import { Markup } from 'telegraf';
import { BotContext } from '../types/context';
import TaskModel, { ITask } from '../models/Task';

export async function inProgressTasksCommand(ctx: BotContext): Promise<void> {
  const userId = ctx.user?._id;
  if (!userId) {
    await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const tasks = await TaskModel
    .find({ workerId: userId, status: 'in-progress' })
    .lean<ITask[]>();

  if (!tasks.length) {
    await ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ.');
    return;
  }

  await ctx.reply(renderTaskList(tasks, 'üîß –°–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'), {
    parse_mode: 'Markdown',
    reply_markup: Markup.inlineKeyboard(
      tasks.map(t =>
        Markup.button.callback(`‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å ¬´${t.title}¬ª`, `finish_${t._id}`),
      ),
      { columns: 1 },
    ).reply_markup,
  });
}

function formatDate(date?: Date) {
  return date ? new Date(date).toLocaleString('ru-RU') : '';
}

function renderTaskList(tasks: ITask[], title: string): string {
  const lines = tasks.map((t, i) => [
    `${i + 1}. ${t.title}`,
    t.deadline && `‚è∞ ${formatDate(t.deadline)}`,
    t.description && `üìù ${t.description}`,
  ].filter(Boolean).join('\n'));

  return `${title}\n\n${lines.join('\n\n')}`;
}
