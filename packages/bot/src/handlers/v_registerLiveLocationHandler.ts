// import { Telegraf, Context, Markup } from "telegraf";
// import { Types } from "mongoose";
// import UserModel, { IUser } from "../models/User";
// import TaskModel, { ITask } from "../models/Task";
// import LiveLocationService from "../services/LiveLocationService";
// import TaskService from "../services/TaskService";
// import { UserSessionStore } from "../services/UserSessionStore";
// import { SessionService } from "../services/SessionService";
// import { PositionService } from "../services/PositionService";
// import {
//   startWatch,
//   updateWatch,          // stopWatch –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ inline-–∫–Ω–æ–ø–∫—É ¬´–°—Ç–æ–ø¬ª
// } from "../services/LiveLocationWatchdog";

// export const registerLiveLocationHandler = (bot: Telegraf<Context>): void => {
//   bot.on(["message", "edited_message"], async (ctx, next): Promise<void> => {
//     const msg: any = ctx.message ?? ctx.editedMessage;
//     console.debug("[LiveLocation] üì• Incoming update:", JSON.stringify(msg, null, 2));

//     /* 1. –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –∞–ø–¥–µ–π—Ç—ã —Å location */
//     if (!msg?.location) {
//       console.debug("[LiveLocation] ‚ùå No location found. Skipping.");
//       await next();
//       return;
//     }

//     try {
//       /* 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
//       const telegramId = ctx.from?.id?.toString();
//       if (!telegramId) {
//         console.debug("[LiveLocation] ‚ö†Ô∏è ctx.from.id absent.");
//         await next();
//         return;
//       }

//       const user = await UserModel
//         .findOne({ telegramId })
//         .lean<IUser & { _id: Types.ObjectId }>();
//       if (!user) {
//         console.debug("[LiveLocation] ‚ùå User not found.");
//         await next();
//         return;
//       }
//       const userId = user._id;
//       console.debug("[LiveLocation] ‚úÖ User found:", userId.toString());

//       /* 3. Watchdog: —Ñ–∏–∫—Å–∏—Ä—É–µ–º live-sharing */
//       const hasLivePeriod = typeof msg.location.live_period === "number";
//       if (!ctx.editedMessage && hasLivePeriod) {
//         /* –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º watch */
//         startWatch(userId, msg.message_id, msg.date, msg.location.live_period);
//       }
//       updateWatch(userId, hasLivePeriod);

//       /* 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É */
//       const { latitude, longitude } = msg.location;
//       await PositionService.savePosition(
//         userId,
//         latitude,
//         longitude,
//         undefined,           // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞ —Å–µ—Å—Å–∏—è
//         undefined
//       );
//       console.debug("[LiveLocation] ‚úÖ Position saved.");

//       /* 5. –ñ–∏–≤–æ–π —Ñ–ª–∞–≥ –≤ FSM */
//       await LiveLocationService.setLiveLocationActive(userId, true);

//       /* 6. –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á ‚îÄ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
//       const fsm = await UserSessionStore.getState(userId);

//       let taskId: Types.ObjectId | undefined;
//       let sessionId: Types.ObjectId | undefined;

//       if (fsm?.data?.taskId && Types.ObjectId.isValid(fsm.data.taskId)) {
//         taskId = new Types.ObjectId(fsm.data.taskId);
//         const session = await SessionService.startSession(userId, taskId);
//         sessionId = session._id;
//       }

//       await PositionService.savePosition(
//         userId,
//         latitude,
//         longitude,
//         sessionId,
//         taskId
//       );

//       if (!taskId) {
//         await UserSessionStore.setState(userId, "free_live", {
//           liveLocationActive: true,
//         });
//         if (fsm?.state !== "free_live") {
//           await ctx.reply("üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.");
//         }
//         await next();
//         return;
//       }

//       if (fsm?.state === "awaiting_location") {
//         await TaskService.startTask(userId);
//         await UserSessionStore.setState(userId, "task_in_progress", {
//           taskId,
//           liveLocationActive: true,
//         });

//         const task = await TaskModel.findById(taskId).lean<ITask>();
//         await ctx.reply(
//           `üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–¥–∞—á–∞ *${
//             task?.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
//           }* –Ω–∞—á–∞—Ç–∞.`,
//           {
//             parse_mode: "Markdown",
//             ...Markup.inlineKeyboard([
//               [
//                 Markup.button.callback(
//                   "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
//                   `complete_${taskId}`
//                 ),
//               ],
//             ]),
//           }
//         );
//       } else {
//         await UserSessionStore.setState(userId, "location_received", {
//           taskId,
//           liveLocationActive: true,
//         });
//       }
//     } catch (err) {
//       console.error("[LiveLocation] üî• Error occurred:", err);
//       await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏.");
//     }

//     /* –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ü–µ–ø–æ—á–∫—É */
//     await next();
//   });
// };
