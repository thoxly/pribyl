import { bot } from "../";
import UserModel, { IUser } from "../models/User";
import TaskModel, { ITask } from "../models/Task";
import { escapeMarkdownV2 } from "../utils/escapeMarkdown";
import { UserSessionStore } from "../services/UserSessionStore";
import { Types } from "mongoose";

export const sendTaskToWorker = async (taskInput: ITask): Promise<void> => {
  try {
    if (!taskInput.workerId || !taskInput.company) {
      console.warn(`–ó–∞–¥–∞—á–∞ ${taskInput._id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç workerId –∏–ª–∏ company`);
      return;
    }

    const task = await TaskModel.findById(taskInput._id)
      .populate("createdBy", "fullName")
      .lean<ITask & { createdBy?: { fullName?: string }; _id: Types.ObjectId }>();

    if (!task) {
      console.warn(`–ó–∞–¥–∞—á–∞ ${taskInput._id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    if (!task.company) {
      console.warn(`–ó–∞–¥–∞—á–∞ ${task._id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç company`);
      return;
    }

    const worker = await UserModel.findById(task.workerId).lean<IUser>();
    if (!worker?.telegramId) {
      console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${task.workerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram`);
      return;
    }

    if (!worker.company || worker.company.toString() !== task.company.toString()) {
      console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${worker._id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏`);
      return;
        }


    await UserSessionStore.setState(worker._id, "awaiting_task_in_progress", {
      taskId: task._id.toString(),
    });


    const parts: string[] = ["üõ† *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞*"];
    if (task.title) parts.push(`*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdownV2(task.title)}`);
    if (task.address) parts.push(`*–ê–¥—Ä–µ—Å:* ${escapeMarkdownV2(task.address)}`);
    if (task.dateStart) parts.push(`*–ù–∞—á–∞–ª–æ:* ${escapeMarkdownV2(new Date(task.dateStart).toLocaleString())}`);
    if (task.deadline) parts.push(`*–î–µ–¥–ª–∞–π–Ω:* ${escapeMarkdownV2(new Date(task.deadline).toLocaleString())}`);
    if (task.description) parts.push(`*–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdownV2(task.description)}`);
    if (task.createdBy?.fullName) parts.push(`*–°–æ–∑–¥–∞–Ω–æ:* ${escapeMarkdownV2(task.createdBy.fullName)}`);

    const message = parts.join("\n");

    await bot.telegram.sendMessage(worker.telegramId, message, {
      parse_mode: "MarkdownV2",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data: `accept_${task._id}` }],
          [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data: "back_to_assigned_task" }],
        ],
      },
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä—É:", err);
  }
};
